# Web Admin 管理系统 - 生产环境 Docker Compose 配置
version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: web-admin-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-web_admin}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d:ro
      - ./backups:/backups
    networks:
      - web-admin-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-web_admin}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Rust 后端服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: web-admin-backend-prod
    restart: always
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-web_admin}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-24h}
      RUST_LOG: ${RUST_LOG:-info}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - web-admin-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

  # Angular 前端服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: web-admin-frontend-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - web-admin-network
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # 负载均衡器 (可选)
  nginx-lb:
    image: nginx:alpine
    container_name: web-admin-nginx-lb
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - web-admin-network
    profiles:
      - loadbalancer

# 网络配置
networks:
  web-admin-network:
    driver: bridge
    name: web-admin-network-prod

# 数据卷配置
volumes:
  postgres_data:
    name: web-admin-postgres-data-prod
  prometheus_data:
    name: web-admin-prometheus-data
  grafana_data:
    name: web-admin-grafana-data
